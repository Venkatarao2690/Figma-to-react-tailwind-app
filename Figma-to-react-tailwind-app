import React, { useEffect, useState } from "react";

// Single-file React app (App.jsx) built for Tailwind CSS
// Default export is the App component. Paste into a Vite/CRA project as src/App.jsx
// Tailwind must be configured in the project for styling to work.

const STORAGE_KEY = "app.tasks.v1";

// Simple helper to read/write localStorage with safety
function readTasksFromStorage() {
  try {
    const raw = localStorage.getItem(STORAGE_KEY);
    if (!raw) return null; // indicate no saved data
    return JSON.parse(raw);
  } catch (e) {
    // invalid JSON or storage permission error
    throw new Error("Failed to read from local storage: " + e.message);
  }
}

function writeTasksToStorage(tasks) {
  try {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(tasks));
  } catch (e) {
    throw new Error("Failed to save to local storage: " + e.message);
  }
}

function uid() {
  return Math.random().toString(36).slice(2, 9);
}

function Loading() {
  return (
    <div className="flex items-center justify-center py-12">
      <div className="animate-spin rounded-full h-12 w-12 border-4 border-gray-300 border-t-gray-700" />
    </div>
  );
}

function ErrorBox({ message, onRetry }) {
  return (
    <div className="bg-red-50 border border-red-200 text-red-800 rounded-lg p-4">
      <div className="font-medium">Something went wrong</div>
      <div className="mt-1 text-sm">{message}</div>
      {onRetry && (
        <div className="mt-3">
          <button
            onClick={onRetry}
            className="px-3 py-1 bg-red-600 text-white rounded hover:opacity-90"
          >
            Retry
          </button>
        </div>
      )}
    </div>
  );
}

function Header({ count }) {
  return (
    <header className="flex items-center justify-between mb-6">
      <div>
        <h1 className="text-2xl font-semibold">Task Dashboard</h1>
        <p className="text-sm text-gray-500">Manage tasks locally in your browser</p>
      </div>
      <div className="text-right">
        <div className="text-sm text-gray-500">Total</div>
        <div className="text-lg font-medium">{count}</div>
      </div>
    </header>
  );
}

function TaskCard({ task, onEdit, onDelete, onToggleDone }) {
  return (
    <div className="p-4 bg-white rounded-2xl shadow-sm border">
      <div className="flex items-start justify-between gap-4">
        <div>
          <div className={`text-lg font-medium ${task.done ? 'line-through text-gray-400' : ''}`}>{task.title}</div>
          <div className="text-sm text-gray-500 mt-1">{task.description}</div>
          <div className="mt-3 flex gap-2 text-xs">
            <div className="px-2 py-1 bg-gray-100 rounded">Priority: {task.priority}</div>
            <div className="px-2 py-1 bg-gray-100 rounded">Due: {task.dueDate || 'â€”'}</div>
          </div>
        </div>
        <div className="flex flex-col items-end gap-2">
          <button
            onClick={() => onToggleDone(task.id)}
            className={`px-3 py-1 rounded-lg text-sm border ${task.done ? 'bg-green-50 border-green-400' : 'bg-white border-gray-200'}`}>
            {task.done ? 'Done' : 'Mark done'}
          </button>
          <button onClick={() => onEdit(task)} className="px-3 py-1 rounded-lg text-sm border border-gray-200">Edit</button>
          <button onClick={() => onDelete(task.id)} className="px-3 py-1 rounded-lg text-sm border border-red-200 text-red-600">Delete</button>
        </div>
      </div>
    </div>
  );
}

function TaskForm({ initial = null, onCancel, onSave }) {
  const [title, setTitle] = useState(initial?.title || "");
  const [description, setDescription] = useState(initial?.description || "");
  const [priority, setPriority] = useState(initial?.priority || "Medium");
  const [dueDate, setDueDate] = useState(initial?.dueDate || "");
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState(null);

  function handleSubmit(e) {
    e.preventDefault();
    setError(null);
    if (!title.trim()) return setError("Title is required");
    setSaving(true);
    // simulate small delay for UX
    setTimeout(() => {
      const payload = {
        id: initial?.id || uid(),
        title: title.trim(),
        description: description.trim(),
        priority,
        dueDate,
        done: initial?.done || false,
        updatedAt: new Date().toISOString(),
      };
      setSaving(false);
      onSave(payload);
    }, 500);
  }

  return (
    <form className="space-y-3" onSubmit={handleSubmit}>
      <div>
        <label className="block text-sm font-medium">Title</label>
        <input value={title} onChange={e => setTitle(e.target.value)} className="mt-1 block w-full rounded-md border-gray-200 shadow-sm p-2" />
      </div>
      <div>
        <label className="block text-sm font-medium">Description</label>
        <textarea value={description} onChange={e => setDescription(e.target.value)} className="mt-1 block w-full rounded-md border-gray-200 shadow-sm p-2" rows={3} />
      </div>
      <div className="flex gap-3">
        <div className="flex-1">
          <label className="block text-sm font-medium">Priority</label>
          <select value={priority} onChange={e => setPriority(e.target.value)} className="mt-1 block w-full rounded-md border-gray-200 p-2">
            <option>Low</option>
            <option>Medium</option>
            <option>High</option>
          </select>
        </div>
        <div>
          <label className="block text-sm font-medium">Due</label>
          <input type="date" value={dueDate} onChange={e => setDueDate(e.target.value)} className="mt-1 block rounded-md border-gray-200 p-2" />
        </div>
      </div>
      {error && <div className="text-sm text-red-600">{error}</div>}
      <div className="flex items-center gap-2">
        <button type="submit" disabled={saving} className="px-4 py-2 bg-sky-600 text-white rounded-lg">{saving ? 'Saving...' : 'Save'}</button>
        <button type="button" onClick={onCancel} className="px-4 py-2 border rounded-lg">Cancel</button>
      </div>
    </form>
  );
}

export default function App() {
  const [tasks, setTasks] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const [editing, setEditing] = useState(null);
  const [showForm, setShowForm] = useState(false);
  const [filter, setFilter] = useState("all");

  // Load with simulated network delay, then fallback to seeded data
  useEffect(() => {
    setLoading(true);
    setError(null);
    const t = setTimeout(() => {
      try {
        const stored = readTasksFromStorage();
        if (stored === null) {
          const seed = [
            { id: uid(), title: "Design review", description: "Review the new UI visuals", priority: "High", dueDate: "", done: false },
            { id: uid(), title: "Write doc", description: "Complete feature spec", priority: "Medium", dueDate: "", done: false },
          ];
          setTasks(seed);
          writeTasksToStorage(seed);
        } else {
          setTasks(stored);
        }
      } catch (e) {
        setError(e.message);
      } finally {
        setLoading(false);
      }
    }, 700);
    return () => clearTimeout(t);
  }, []);

  function saveAndClose(newTasks) {
    try {
      writeTasksToStorage(newTasks);
      setTasks(newTasks);
      setShowForm(false);
      setEditing(null);
    } catch (e) {
      setError(e.message);
    }
  }

  function handleAddClick() {
    setEditing(null);
    setShowForm(true);
  }

  function handleSaveTask(payload) {
    const exists = tasks.find(t => t.id === payload.id);
    let next;
    if (exists) {
      next = tasks.map(t => (t.id === payload.id ? { ...t, ...payload } : t));
    } else {
      next = [payload, ...tasks];
    }
    saveAndClose(next);
  }

  function handleDelete(id) {
    if (!confirm("Delete this task?")) return;
    const next = tasks.filter(t => t.id !== id);
    saveAndClose(next);
  }

  function handleEdit(task) {
    setEditing(task);
    setShowForm(true);
  }

  function handleToggleDone(id) {
    const next = tasks.map(t => t.id === id ? { ...t, done: !t.done } : t);
    saveAndClose(next);
  }

  function handleClearStorage() {
    if (!confirm("Clear all tasks from local storage?")) return;
    try {
      localStorage.removeItem(STORAGE_KEY);
      setTasks([]);
    } catch (e) {
      setError(e.message);
    }
  }

  const filtered = tasks.filter(t => {
    if (filter === 'all') return true;
    if (filter === 'done') return t.done;
    if (filter === 'active') return !t.done;
    return true;
  });

  return (
    <div className="min-h-screen bg-gray-50 p-6 sm:p-10 font-sans text-gray-800">
      <div className="max-w-5xl mx-auto">
        <Header count={tasks.length} />

        <div className="mb-6 flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3">
          <div className="flex items-center gap-3">
            <div className="rounded-md border bg-white p-2">
              <select value={filter} onChange={e => setFilter(e.target.value)} className="p-1 outline-none">
                <option value="all">All</option>
                <option value="active">Active</option>
                <option value="done">Done</option>
              </select>
            </div>
            <div className="text-sm text-gray-500">Showing {filtered.length} of {tasks.length}</div>
          </div>

          <div className="flex gap-2">
            <button onClick={handleAddClick} className="px-4 py-2 bg-sky-600 text-white rounded-lg">New Task</button>
            <button onClick={handleClearStorage} className="px-4 py-2 border rounded-lg">Clear All</button>
          </div>
        </div>

        {loading && <Loading />}
        {error && !loading && <ErrorBox message={error} onRetry={() => window.location.reload()} />}

        {!loading && !error && (
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
            {/* Left column: form / details area (span across for mobile) */}
            <div className="sm:col-span-2 lg:col-span-1">
              <div className="sticky top-6">
                <div className="bg-white rounded-2xl p-4 border shadow-sm">
                  {showForm ? (
                    <>
                      <div className="mb-3 font-medium">{editing ? 'Edit Task' : 'Create Task'}</div>
                      <TaskForm
                        initial={editing}
                        onCancel={() => { setShowForm(false); setEditing(null); }}
                        onSave={handleSaveTask}
                      />
                    </>
                  ) : (
                    <>
                      <div className="text-sm text-gray-600">Quick actions</div>
                      <div className="mt-4 flex flex-col gap-2">
                        <button onClick={handleAddClick} className="px-3 py-2 rounded-lg border">+ Add task</button>
                        <button onClick={() => { setFilter('done'); }} className="px-3 py-2 rounded-lg border">Show completed</button>
                      </div>
                    </>
                  )}
                </div>
              </div>
            </div>

            {/* Right columns: task cards */}
            <div className="sm:col-span-2 lg:col-span-2 grid grid-cols-1 md:grid-cols-2 gap-4">
              {filtered.length === 0 ? (
                <div className="col-span-full bg-white rounded-2xl p-6 border text-center text-gray-500">No tasks yet â€” create one to get started.</div>
              ) : (
                filtered.map(task => (
                  <TaskCard
                    key={task.id}
                    task={task}
                    onEdit={handleEdit}
                    onDelete={handleDelete}
                    onToggleDone={handleToggleDone}
                  />
                ))
              )}
            </div>
          </div>
        )}

        <footer className="mt-10 text-center text-sm text-gray-400">Built with React + Tailwind â€¢ Local-only storage</footer>
      </div>
    </div>
  );
}
